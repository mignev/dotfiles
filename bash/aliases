#!/bin/bash

is_linux=$(uname -an|grep 'Linux')
is_macbook_pro=$(uname -an|grep 'Pro')
is_ppc=$(uname -an|grep 'PPC')

if [ -f ~/.bash/private_aliases ]; then
    source ~/.bash/private_aliases
fi

if [ -f ~/.bash/djm/djm.sh ]; then
    source ~/.bash/djm/djm.sh
fi

if [ -f ~/.bash/venv/venv.sh ]; then
    source ~/.bash/venv/venv.sh
fi

alias reload_aliases="source ~/.bash/aliases"
alias reload_bash="source ~/.bash/config"

if [ -n "$is_linux" ];
then
    #is_linux = True
    alias ls="ls --classify --color=auto"
else
    #is_linux = False
    #Mac maybe :)
    if [ ! -n "$is_ppc" ]; then
      if [ -f /Applications/MacPorts/MacVim.app/Contents/MacOS/Vim ]; then
        alias vim=/Applications/MacPorts/MacVim.app/Contents/MacOS/Vim
      fi

      if [ -f /Applications/MacVim.app/Contents/MacOS/Vim ]; then
        alias vim=/Applications/MacVim.app/Contents/MacOS/Vim
      fi
    fi
    alias ls="ls -G"
    alias updatedb="sudo /usr/libexec/locate.updatedb"
fi

alias wgets="wget --no-check-certificate"
alias pyg="pygrep"
alias tmx="tmuxer"
alias hard="pyhard"

alias subl="/Applications/Sublime\ Text.app/Contents/SharedSupport/bin/subl"

alias ..="cd .."
alias ...="cd ../.."
alias ....="cd ../../.."
alias .....="cd ../../../.."
alias ......="cd ../../../../.."
alias .......="cd ../../../../../.."
alias .4='cd ../../../../'
alias .5='cd ../../../../..'

alias cdd='cd -'  # back to last directory
alias o="open ."  # OS X, open in Finder

alias titanium="/Library/Application\ Support/Titanium/mobilesdk/osx/1.8.1/titanium.py"

alias php52="/Applications/MAMP/bin/php5.2/bin/php"
alias php53="/Applications/MAMP/bin/php5.3/bin/php"

alias mrr="macrake run"

alias pjson="python -m json.tool"
alias ard="cd /Applications/Arduino.app/Contents/Resources/Java"
alias findw="grep -oHnr"

complete -W "$(echo $(grep '^ssh ' .bash_history | sort -u | sed 's/^ssh //'))" ssh

###
# Proudly stolen from alias.sh
###

alias servethis="python -c 'import SimpleHTTPServer; SimpleHTTPServer.test()'"
alias freq='cut -f1 -d" " ~/.bash_history | sort | uniq -c | sort -nr | head -n 30'

extract () {
    if [ -f $1 ] ; then
      case $1 in
        *.tar.bz2)   tar xjf $1     ;;
        *.tar.gz)    tar xzf $1     ;;
        *.bz2)       bunzip2 $1     ;;
        *.rar)       unrar e $1     ;;
        *.gz)        gunzip $1      ;;
        *.tar)       tar xf $1      ;;
        *.tbz2)      tar xjf $1     ;;
        *.tgz)       tar xzf $1     ;;
        *.zip)       unzip $1       ;;
        *.Z)         uncompress $1  ;;
        *.7z)        7z x $1        ;;
        *)     echo "'$1' cannot be extracted via extract()" ;;
         esac
     else
         echo "'$1' is not a valid file"
     fi
}

alias lf='ls -Gl | grep ^d' #Only list directories
alias lsd='ls -Gal | grep ^d' #Only list directories, including hidden ones

# Show lines that are not blank or commented out
alias active='grep -v -e "^$" -e"^ *#"'

# Show hidden files only
alias l.='ls -d .*'

# Recursive directory listing
alias lr='ls -R | grep ":$" | sed -e '\''s/:$//'\'' -e '\''s/[^-][^\/]*\//--/g'\'' -e '\''s/^/   /'\'' -e '\''s/-/|/'\'''

alias netlisteners='lsof -i -P | grep LISTEN'


# Find text in any file
ft() {
    find . -name "$2" -exec grep -il "$1" {} \;
}

# find & replace
findreplace(){
    printf "Search: ${1}\n"
    printf "Replace: ${2}\n"
    printf "In: ${3}\n\n"

    find . -name "*${3}" -type f | xargs perl -pi -e 's/${1}/${2}/g'
}

###
# Functions
###

new_django () { ghcl mignev/django_app $1; }

dws () { cd ~/Downloads/"$1"; }
docs () { cd ~/Documents/"$1"; }
wk () { cd ~/Documents/work/"$1"; }

if [ -n "$is_macbook_pro" ];
then
    htdocs () { cd /Applications/MAMP/htdocs/"$1"; }
    alias mysql="/Applications/MAMP/Library/bin/mysql"
else
    htdocs () { cd /Applications/XAMPP/htdocs/"$1"; }
fi

# Clone github repo
ghcl () { test -z "$1" && echo "Usage: ghcl username/repo"\n || git clone "http://github.com/$@"; }

function dumptcp
{
    NOW=$(date +%Y_%d_%m_%H_%M)
    LOGFILE=tcpdump-$NOW.log

    if [ -z "$1" ];
    then
        if [ -n "$is_macbook_pro" ];
        then
            ETHIFACE="en0"
        else
            ETHIFACE="eth0"
        fi

    else
        ETHIFACE=$1
    fi

    COMMAND="tcpdump -i $ETHIFACE -s0 -w $LOGFILE"

    if [ -n "$is_macbook_pro" ];
    then
        sudo $COMMAND
    else
        $COMMAND
    fi
}

# IP addresses
alias myip="dig +short myip.opendns.com @resolver1.opendns.com"
alias localip="ipconfig getifaddr en1"
alias ips="ifconfig -a | perl -nle'/(\d+\.\d+\.\d+\.\d+)/ && print $1'"
alias flushdns="sudo dscacheutil -flushcache"

######################
# Print working file.
function pwf {
  echo "$PWD/$1"
}

# Create directory and cd to it.
function mkcd {
  mkdir -p "$1" && cd "$1"
}

# SSH to the given machine and add your id_rsa.pub or id_dsa.pub to authorized_keys.
#
# ~$ sshkey server
# Password:
# sshkey done.

function sshkey {
  ssh $@ "mkdir -p ~/.ssh && cat >> ~/.ssh/authorized_keys" < ~/.ssh/id_?sa.pub
    echo "sshkey done."
}
######################
# These last 3 functuions are from http://github.com/henrik/dotfiles/raw/master/bash/functions.sh
######################

parse_git_branch() {
  git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/(\1)/'
}

startapp_app() {
  local rocket=$'\xF0\x9F\x9A\x80';
  is_app=$(git config --get rhc.domain-name 2> /dev/null);
  if [ -n "$is_app" ]; then
    local app_name=$(git config --get rhc.app-name);
    local app_domain=$is_app;
    echo "$rocket <$app_name/$app_domain>";
  fi
}

hide_desktop_icons() {
  # checks visibility and stores value in a variable
  local isVisible="$(defaults read com.apple.finder CreateDesktop)"

  # toggle desktop icon visibility based on variable
  if [ "$isVisible" = 1 ]; then
    defaults write com.apple.finder CreateDesktop -bool false
  else
    defaults write com.apple.finder CreateDesktop -bool true
  fi

  # force changes by restarting Finder
  killall Finder
}

function title()
{
  TITLE=$*;
  export PROMPT_COMMAND='echo -ne "\033]0;$TITLE\007"'
}
